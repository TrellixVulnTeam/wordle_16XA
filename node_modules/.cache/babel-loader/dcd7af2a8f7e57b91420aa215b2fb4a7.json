{"ast":null,"code":"import { WORDS } from \"./words\";\n\nfunction getWords() {\n  return WORDS;\n}\n\nexport function getWordOfTheDay() {\n  const words = getWords();\n  const wordOfTheDay = words[getDayOfTheYear()];\n  return wordOfTheDay.toUpperCase();\n}\nexport async function isValidWord(word) {\n  try {\n    const URL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\" + word;\n    const response = await fetch(URL);\n    if (response.status !== 200) throw new Error(\"Request Failed\");\n    const json = await response.json();\n    return json.length;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n  /* const words = getWords();\r\n  return words.includes(word.toLowerCase()); */\n\n}\n\nfunction getDayOfTheYear() {\n  const now = new Date();\n  const start = new Date(now.getFullYear(), 0, 0);\n  const diff = now - start + (start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}","map":{"version":3,"sources":["C:/Users/nasse/OneDrive/Desktop/wordle/wordle-react/src/service/request.ts"],"names":["WORDS","getWords","getWordOfTheDay","words","wordOfTheDay","getDayOfTheYear","toUpperCase","isValidWord","word","URL","response","fetch","status","Error","json","length","e","console","log","now","Date","start","getFullYear","diff","getTimezoneOffset","oneDay","Math","floor"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAP;AACD;;AAED,OAAO,SAASE,eAAT,GAA2B;AAChC,QAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,QAAMG,YAAY,GAAGD,KAAK,CAACE,eAAe,EAAhB,CAA1B;AACA,SAAOD,YAAY,CAACE,WAAb,EAAP;AACD;AAED,OAAO,eAAeC,WAAf,CAA2BC,IAA3B,EAAyC;AAC9C,MAAI;AACF,UAAMC,GAAG,GAAG,qDAAqDD,IAAjE;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AAC7B,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;AAEA,WAAOA,IAAI,CAACC,MAAZ;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAO,KAAP;AACD;AAED;AACF;;AACC;;AAED,SAASX,eAAT,GAA2B;AACzB,QAAMc,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,KAAK,GAAG,IAAID,IAAJ,CAASD,GAAG,CAACG,WAAJ,EAAT,EAA4B,CAA5B,EAA+B,CAA/B,CAAd;AACA,QAAMC,IAAI,GACPJ,GAAD,GACCE,KADD,GAEA,CAACA,KAAK,CAACG,iBAAN,KAA4BL,GAAG,CAACK,iBAAJ,EAA7B,IAAwD,EAAxD,GAA6D,IAH/D;AAIA,QAAMC,MAAM,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAhC;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAGE,MAAlB,CAAP;AACD","sourcesContent":["import { WORDS } from \"./words\";\r\nfunction getWords() {\r\n  return WORDS;\r\n}\r\n\r\nexport function getWordOfTheDay() {\r\n  const words = getWords();\r\n  const wordOfTheDay = words[getDayOfTheYear()];\r\n  return wordOfTheDay.toUpperCase();\r\n}\r\n\r\nexport async function isValidWord(word: string) {\r\n  try {\r\n    const URL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\" + word;\r\n    const response = await fetch(URL);\r\n    if (response.status !== 200) throw new Error(\"Request Failed\");\r\n    const json = await response.json();\r\n\r\n    return json.length;\r\n  } catch (e) {\r\n    console.log(e);\r\n    return false;\r\n  }\r\n\r\n  /* const words = getWords();\r\n  return words.includes(word.toLowerCase()); */\r\n}\r\n\r\nfunction getDayOfTheYear() {\r\n  const now = new Date();\r\n  const start = new Date(now.getFullYear(), 0, 0);\r\n  const diff =\r\n    (now as any) -\r\n    (start as any) +\r\n    (start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000;\r\n  const oneDay = 1000 * 60 * 60 * 24;\r\n  return Math.floor(diff / oneDay);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}