{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nasse\\\\OneDrive\\\\Desktop\\\\wordle\\\\wordle-react\\\\src\\\\components\\\\Wordle.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useWindow } from \"../hooks/useWindow\";\nimport { getWordOfTheDay, isValidWord } from \"../service/request\";\nimport Keyboard from \"./keyboard\";\nimport Modal from \"./modal\";\nimport RowCompleted from \"./completedRow\";\nimport RowCurrent from \"./currentRow\";\nimport RowEmpty from \"./emptyRow\";\nimport { GameStatus } from \"./types\";\nimport styles from \"./wordle.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst keys = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\", \"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\nexport default function Wordle() {\n  _s();\n\n  const [wordOfTheDay, setWordOfTheDay] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [completedWords, setCompletedWords] = useState([]);\n  const [gameStatus, setGameStatus] = useState(GameStatus.Playing);\n  useWindow(\"keydown\", handleKeyDown);\n  useEffect(() => {\n    setWordOfTheDay(getWordOfTheDay());\n  }, []);\n\n  function handleKeyDown(event) {\n    const key = event.key.toUpperCase();\n    onKeyPressed(key);\n  }\n\n  function onKeyPressed(key) {\n    if (gameStatus !== GameStatus.Playing) {\n      return;\n    }\n\n    if (key === \"BACKSPACE\" && currentWord.length > 0) {\n      onDelete();\n      return;\n    }\n\n    if (key === \"ENTER\" && currentWord.length === 5 && turn <= 6) {\n      onEnter();\n      return;\n    }\n\n    if (currentWord.length >= 5) return; // ingresar la letra al estado\n\n    if (keys.includes(key)) {\n      onInput(key);\n      return;\n    }\n  }\n\n  function onInput(letter) {\n    const newWord = currentWord + letter;\n    setCurrentWord(newWord);\n  }\n\n  function onDelete() {\n    const newWord = currentWord.slice(0, -1);\n    setCurrentWord(newWord);\n  }\n\n  async function onEnter() {\n    if (currentWord === wordOfTheDay) {\n      //ganó el usuario\n      setCompletedWords([...completedWords, currentWord]);\n      setGameStatus(GameStatus.Won);\n      return;\n    }\n\n    if (turn === 6) {\n      //perdió el usuario\n      setCompletedWords([...completedWords, currentWord]);\n      setGameStatus(GameStatus.Lost);\n      return;\n    } // validar si existe la palabra\n\n\n    const validWord = await isValidWord(currentWord); // if (currentWord.length === 5 && !validWord) {\n    //   alert(\"Not a valid word\");\n    //   return;\n    // }\n\n    setCompletedWords([...completedWords, currentWord]);\n    setTurn(turn + 1);\n    setCurrentWord(\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [gameStatus === GameStatus.Won ? /*#__PURE__*/_jsxDEV(Modal, {\n      type: \"won\",\n      completedWords: completedWords,\n      solution: wordOfTheDay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : gameStatus === GameStatus.Lost ? /*#__PURE__*/_jsxDEV(Modal, {\n      type: \"lost\",\n      completedWords: completedWords,\n      solution: wordOfTheDay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mainContainer,\n      children: [completedWords.map((word, i) => /*#__PURE__*/_jsxDEV(RowCompleted, {\n        word: word,\n        solution: wordOfTheDay,\n        animate: true\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)), gameStatus === GameStatus.Playing ? /*#__PURE__*/_jsxDEV(RowCurrent, {\n        word: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : null, Array.from(Array(6 - turn)).map((_, i) => /*#__PURE__*/_jsxDEV(RowEmpty, {}, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      keys: keys,\n      onKeyPressed: onKeyPressed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Wordle, \"Me2MRpEtnd/rKpXrGzaLyjn6aCA=\", false, function () {\n  return [useWindow];\n});\n\n_c = Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["C:/Users/nasse/OneDrive/Desktop/wordle/wordle-react/src/components/Wordle.tsx"],"names":["useEffect","useState","useWindow","getWordOfTheDay","isValidWord","Keyboard","Modal","RowCompleted","RowCurrent","RowEmpty","GameStatus","styles","keys","Wordle","wordOfTheDay","setWordOfTheDay","turn","setTurn","currentWord","setCurrentWord","completedWords","setCompletedWords","gameStatus","setGameStatus","Playing","handleKeyDown","event","key","toUpperCase","onKeyPressed","length","onDelete","onEnter","includes","onInput","letter","newWord","slice","Won","Lost","validWord","mainContainer","map","word","i","Array","from","_"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useWindow } from \"../hooks/useWindow\";\r\nimport { getWordOfTheDay, isValidWord } from \"../service/request\";\r\nimport Keyboard from \"./keyboard\";\r\nimport Modal from \"./modal\";\r\nimport RowCompleted from \"./completedRow\";\r\nimport RowCurrent from \"./currentRow\";\r\nimport RowEmpty from \"./emptyRow\";\r\nimport { GameStatus } from \"./types\";\r\n\r\nimport styles from \"./wordle.module.scss\";\r\n\r\nconst keys = [\r\n  \"Q\",\r\n  \"W\",\r\n  \"E\",\r\n  \"R\",\r\n  \"T\",\r\n  \"Y\",\r\n  \"U\",\r\n  \"I\",\r\n  \"O\",\r\n  \"P\",\r\n  \"A\",\r\n  \"S\",\r\n  \"D\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \"Z\",\r\n  \"X\",\r\n  \"C\",\r\n  \"V\",\r\n  \"B\",\r\n  \"N\",\r\n  \"M\",\r\n];\r\n\r\nexport default function Wordle() {\r\n  const [wordOfTheDay, setWordOfTheDay] = useState<string>(\"\");\r\n  const [turn, setTurn] = useState<number>(1);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [completedWords, setCompletedWords] = useState<string[]>([]);\r\n  const [gameStatus, setGameStatus] = useState<GameStatus>(GameStatus.Playing);\r\n\r\n  useWindow(\"keydown\", handleKeyDown);\r\n\r\n  useEffect(() => {\r\n    setWordOfTheDay(getWordOfTheDay());\r\n  }, []);\r\n\r\n  function handleKeyDown(event: KeyboardEvent) {\r\n    const key = event.key.toUpperCase();\r\n\r\n    onKeyPressed(key);\r\n  }\r\n\r\n  function onKeyPressed(key: string) {\r\n    if (gameStatus !== GameStatus.Playing) {\r\n      return;\r\n    }\r\n\r\n    if (key === \"BACKSPACE\" && currentWord.length > 0) {\r\n      onDelete();\r\n      return;\r\n    }\r\n\r\n    if (key === \"ENTER\" && currentWord.length === 5 && turn <= 6) {\r\n      onEnter();\r\n      return;\r\n    }\r\n\r\n    if (currentWord.length >= 5) return;\r\n\r\n    // ingresar la letra al estado\r\n    if (keys.includes(key)) {\r\n      onInput(key);\r\n      return;\r\n    }\r\n  }\r\n\r\n  function onInput(letter: string) {\r\n    const newWord = currentWord + letter;\r\n    setCurrentWord(newWord);\r\n  }\r\n\r\n  function onDelete() {\r\n    const newWord = currentWord.slice(0, -1);\r\n    setCurrentWord(newWord);\r\n  }\r\n\r\n  async function onEnter() {\r\n    if (currentWord === wordOfTheDay) {\r\n      //ganó el usuario\r\n      setCompletedWords([...completedWords, currentWord]);\r\n      setGameStatus(GameStatus.Won);\r\n      return;\r\n    }\r\n\r\n    if (turn === 6) {\r\n      //perdió el usuario\r\n      setCompletedWords([...completedWords, currentWord]);\r\n      setGameStatus(GameStatus.Lost);\r\n      return;\r\n    }\r\n\r\n    // validar si existe la palabra\r\n    const validWord = await isValidWord(currentWord);\r\n\r\n    // if (currentWord.length === 5 && !validWord) {\r\n    //   alert(\"Not a valid word\");\r\n    //   return;\r\n    // }\r\n\r\n    setCompletedWords([...completedWords, currentWord]);\r\n    setTurn(turn + 1);\r\n    setCurrentWord(\"\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {gameStatus === GameStatus.Won ? (\r\n        <Modal\r\n          type=\"won\"\r\n          completedWords={completedWords}\r\n          solution={wordOfTheDay}\r\n        />\r\n      ) : gameStatus === GameStatus.Lost ? (\r\n        <Modal\r\n          type=\"lost\"\r\n          completedWords={completedWords}\r\n          solution={wordOfTheDay}\r\n        />\r\n      ) : null}\r\n      <div className={styles.mainContainer}>\r\n        {completedWords.map((word, i) => (\r\n          <RowCompleted\r\n            key={i}\r\n            word={word}\r\n            solution={wordOfTheDay}\r\n            animate={true}\r\n          />\r\n        ))}\r\n\r\n        {gameStatus === GameStatus.Playing ? (\r\n          <RowCurrent word={currentWord} />\r\n        ) : null}\r\n\r\n        {Array.from(Array(6 - turn)).map((_, i) => (\r\n          <RowEmpty key={i} />\r\n        ))}\r\n      </div>\r\n\r\n      <Keyboard keys={keys} onKeyPressed={onKeyPressed} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}